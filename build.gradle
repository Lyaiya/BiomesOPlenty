plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'maven-publish'
}

group = "com.github.glitchfiend"
base.archivesName = "${mod_name}"
def mod_build_version = "${mod_version}.${System.getenv().BUILD_NUMBER}"
version = "${minecraft_version}-${mod_build_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory = project.file("run")
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')
        }
    }
}

// Configure  the source folders
sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
            srcDir 'src/generated/resources'
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${terrablender_version}")
}

tasks.named('processResources', ProcessResources).configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : mod_build_version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_build_version,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version
        ])
    }
}

tasks.register('deobfJar', Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

tasks.register('apiJar', Jar) {
    from(sourceSets.main.allJava) {
        include "${mod_id}/api/**"
    }
    from(sourceSets.main.output) {
        include 'LICENSE.txt'
        include "${mod_id}/api/**"
    }

    // TODO: Investigate why there are duplicates produced in the first place
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set('api')
}

def changelog_file = rootProject.file("build/${mod_name}-${version}-changelog.txt")

curseforge {
    if (project.hasProperty('curseApiKey')) {
        apiKey = project.getProperty('curseApiKey')
    }
    project {
        id = mod_curseforge_id

        if (changelog_file.exists()) {
            changelog = changelog_file
        }

        releaseType = 'beta'
        addGameVersion minecraft_version

        mainArtifact(jar) {
            displayName = "${mod_display_name} ${version}"
        }

        addArtifact deobfJar
        addArtifact apiJar

        relations {
            requiredDependency 'terrablender'
        }
    }
}

artifacts {
    if (changelog_file.exists()) {
        archives changelog_file
    }
    archives jar
    archives deobfJar
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // We must use artifact jar to ensure the Forge dependency is excluded from the pom, breaking fg.deobf()
            artifact jar
            artifact deobfJar
            artifact apiJar
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            pom {
                name = project.mod_name
                description = project.mod_description
                url = project.mod_git_url
                scm {
                    url = project.mod_git_url
                    connection = project.mod_scm_url
                    developerConnection = project.mod_scm_url
                }
                issueManagement {
                    system = 'github'
                    url = project.mod_issues_url
                }
                licenses {
                    license {
                        name = 'All Rights Reserved'
                    }
                }
                developers {
                    developer {
                        id = 'adubbz'
                        name = 'Adubbz'
                    }
                    developer {
                        id = 'forstride'
                        name = 'Forstride'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://maven.minecraftforge.net/releases/"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = System.env.MAVEN_USER ?: 'fake'
                password = System.env.MAVEN_PASSWORD ?: 'news'
            }
        }
    }
}
